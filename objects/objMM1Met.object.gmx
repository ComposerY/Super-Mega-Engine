<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM1Met</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_xscale = -1;

reflectProjectiles = true;

//Enemy specific code
radius = 4 * 16; //Four blocks; the radius that MM needs to enter to trigger the shooting of the Met
cooldownTimer = 0;
canShoot = true;
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if global.frozen == false &amp;&amp; dead == false
{
    if instance_exists(objMegaman)
    {
        if x &lt; objMegaman.x
            image_xscale = 1;
        else
            image_xscale = -1;
        
        if distance_to_object(objMegaman) &lt;= radius
        {
            if canShoot == true
            {
                canShoot = false;
                image_index = 1;
            }
        }
    }
    
    if canShoot == false
    {
        cooldownTimer += 1;
        
        if cooldownTimer == 17
        {
            //Shoot
            var ID;
            ID = instance_create(x+image_xscale*8, sprite_get_ycenter(), objMM1MetBullet);
            {
                ID.dir = 45;
                ID.xscale = image_xscale;
            }
            ID = instance_create(x+image_xscale*8, sprite_get_ycenter(), objMM1MetBullet);
            {
                ID.dir = 0;
                ID.xscale = image_xscale;
            }
            ID = instance_create(x+image_xscale*8, sprite_get_ycenter(), objMM1MetBullet);
            {
                ID.dir = -45;
                ID.xscale = image_xscale;
            }
            
            playSFX(sfxEnemyShootClassic);
        }
        else if cooldownTimer == 30
        {
            image_index = 0;
        }
        else if cooldownTimer &gt;= 80
        {
            canShoot = true;
            cooldownTimer = 0;
        }
    }
    
    //Set the protection of the Met
    if image_index == 0
        reflectProjectiles = true;
    else
        reflectProjectiles = false;
        
    x += xspeed;
    y += yspeed;
}
else
{
    if dead == true
    {
        cooldownTimer = 0;
        canShoot = true;
        image_index = 0;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>9,-1</point>
    <point>9,9</point>
  </PhysicsShapePoints>
</object>
